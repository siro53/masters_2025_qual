あなたにAtCoder Heuristic Contestのビジュアライザ・入力ジェネレーターの作成をお願いしたいです。
システムはReact + Rustによるwasmで構成されていて、概ね以下のような担当分けになっています:
React側: seed値・outputをtextareaから受け付けて、Rustに送る・Rustから受け取った入力ファイルをTextAreaに表示・Rustから受け取ったsvgを表示
Rust側: Reactから渡されたものに対して処理を行う: 
具体的には、
- seedの値に基づいて入力ファイルの作成
- 与えられた出力に基づいてビジュアライザの作成(svgの描画)、ターンごと
- 入力・出力を受け取って、最大のターン数を返す
ことを行なっています。
以下のコードはRust側の例で、インターフェースを変えずに(つまり、lib.rsの内容をほぼ変えずに)、別のコンテスト用のビジュアライザシステムの開発を行いたいです:

[lib.rs]
use wasm_bindgen::prelude::*;
mod util;

#[wasm_bindgen]
pub fn gen(seed: i32) -> String {
    util::gen(seed as u64).to_string()
}

#[wasm_bindgen(getter_with_clone)]
pub struct Ret {
    pub score: i64,
    pub err: String,
    pub svg: String,
}

#[wasm_bindgen]
pub fn vis(_input: String, _output: String, turn: usize) -> Ret {
    let input = util::parse_input(&_input);
    let output = util::parse_output(&_output);
    let (score, err, svg) = util::vis(&input, &output, turn);
    Ret {
        score: score as i64,
        err,
        svg,
    }
}

#[wasm_bindgen]
pub fn get_max_turn(_input: String, _output: String) -> usize {
    let output = util::parse_output(&_output);
    output.q
}

[util.rs]
#![allow(non_snake_case, unused_macros)]
use proconio::input;
use rand::prelude::*;
use std::collections::VecDeque;
use svg::node::element::{Rectangle, Style};
use web_sys::console::log_1;

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[derive(Clone, Debug)]
pub struct Input {
    pub id: usize,
    pub n: usize,
    pub k: usize,
    pub s: Vec<String>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "{} {} {}", self.id, self.n, self.k)?;
        for i in 0..self.n {
            writeln!(f, "{}", self.s[i])?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        id:usize,
        n: usize,
        k: usize,
        s: [String; n]
    }
    Input { id, n, k, s }
}

pub struct Output {
    pub q: usize,
    pub yxc: Vec<(usize, usize, usize)>,
}

pub fn parse_output(f: &str) -> Output {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        q: usize,
        yxc: [(usize, usize, usize); q]
    }
    Output { q, yxc }
}

pub fn gen(seed: u64) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    let id = seed;
    let n = 100;
    let k = 9;
    let s = (0..n)
        .map(|_| {
            (0..n)
                .map(|_| rng.gen_range(1..k + 1).to_string())
                .collect::<String>()
        })
        .collect::<Vec<_>>();
    Input { id: 0, n, k, s }
}

fn calculate_score(input: &Input, yxc: &Vec<(usize, usize, usize)>) -> (usize, Vec<Vec<usize>>) {
    let mut state = vec![vec![0; input.n]; input.n];
    input.s.iter().enumerate().for_each(|(y, s)| {
        s.chars()
            .enumerate()
            .for_each(|(x, c)| state[y][x] = c.to_digit(10).unwrap() as usize)
    });

    let x_vec: Vec<i32> = vec![0, 1, 0, -1];
    let y_vec: Vec<i32> = vec![-1, 0, 1, 0];

    for (y, x, c) in yxc {
        // state[*y][*x] = *c;
        let selected_color = state[*y - 1][*x - 1];

        let mut visited = vec![vec![false; input.n]; input.n];
        let mut queue: VecDeque<(usize, usize)> = VecDeque::new();
        queue.push_back((*y - 1, *x - 1));

        let mut count = 0;

        while queue.len() > 0 {
            let (ypos, xpos) = queue.pop_front().unwrap();
            if visited[ypos][xpos] {
                continue;
            }
            visited[ypos][xpos] = true;
            state[ypos][xpos] = *c;

            count = count + 1;
            for i in 0..4 {
                let nx = xpos as i32 + x_vec[i];
                let ny = ypos as i32 + y_vec[i];
                if nx < 0 || ny < 0 || nx >= input.n as i32 || ny >= input.n as i32 {
                    continue;
                }
                let nx = nx as usize;
                let ny = ny as usize;
                if visited[ny][nx] {
                    continue;
                }

                if state[ny][nx] != selected_color {
                    continue;
                }
                queue.push_back((ny, nx));
            }
        }
    }

    let mut score = 0;
    for color in 1..(input.k + 1) {
        let mut tmp_score = 0;
        for y in 0..input.n {
            for x in 0..input.n {
                if state[y][x] == color {
                    tmp_score += 100;
                }
            }
        }
        score = score.max(tmp_score);
    }
    score -= yxc.len();

    return (score, state);
}

fn generate_dark_color(code: usize) -> String {
    // 入力値に基づいてHue（色相）を計算
    let hue = (code as f32 * 36.0) % 360.0;

    // Saturation（彩度）を低めに、Lightness（明度）を固定値で低く設定
    let saturation = 30.0;
    let lightness = 30.0;

    // HSL to RGB 変換
    let hue_normalized = hue / 360.0;
    let q = if lightness < 0.5 {
        lightness * (1.0 + saturation)
    } else {
        lightness + saturation - (lightness * saturation)
    };

    let p = 2.0 * lightness - q;

    let r = hue_to_rgb(p, q, hue_normalized + 1.0 / 3.0);
    let g = hue_to_rgb(p, q, hue_normalized);
    let b = hue_to_rgb(p, q, hue_normalized - 1.0 / 3.0);

    // RGB を 16 進数に変換して文字列を返す
    format!(
        "#{:02X}{:02X}{:02X}",
        (r * 255.0) as u8,
        (g * 255.0) as u8,
        (b * 255.0) as u8
    )
}

fn generate_color(code: usize) -> String {
    // 入力値に基づいてHue（色相）を計算
    let hue = (code as f32 * 36.0) % 360.0;

    // Saturation（彩度）とLightness（明度）を固定値で設定
    let saturation = 10.0;
    let lightness = 0.1;

    // HSL to RGB 変換
    let hue_normalized = hue / 360.0;
    let q = if lightness < 0.5 {
        lightness * (1.0 + saturation)
    } else {
        lightness + saturation - (lightness * saturation)
    };

    let p = 2.0 * lightness - q;

    let r = hue_to_rgb(p, q, hue_normalized + 1.0 / 3.0);
    let g = hue_to_rgb(p, q, hue_normalized);
    let b = hue_to_rgb(p, q, hue_normalized - 1.0 / 3.0);

    // RGB を 16 進数に変換して文字列を返す
    format!(
        "#{:02X}{:02X}{:02X}",
        (r * 255.0) as u8,
        (g * 255.0) as u8,
        (b * 255.0) as u8
    )
}

fn hue_to_rgb(p: f32, q: f32, t: f32) -> f32 {
    let t = if t < 0.0 {
        t + 1.0
    } else if t > 1.0 {
        t - 1.0
    } else {
        t
    };

    if t < 1.0 / 6.0 {
        p + (q - p) * 6.0 * t
    } else if t < 1.0 / 2.0 {
        q
    } else if t < 2.0 / 3.0 {
        p + (q - p) * (2.0 / 3.0 - t) * 6.0
    } else {
        p
    }
}

pub fn rect(x: usize, y: usize, w: usize, h: usize, fill: &str) -> Rectangle {
    Rectangle::new()
        .set("x", x)
        .set("y", y)
        .set("width", w)
        .set("height", h)
        .set("fill", fill)
}

pub fn vis(input: &Input, output: &Output, turn: usize) -> (i64, String, String) {
    let (score, state) =
        calculate_score(input, &output.yxc[0..turn].into_iter().cloned().collect());

    let W = 800;
    let H = 800;
    let w = 8;
    let h = 8;
    let mut doc = svg::Document::new()
        .set("id", "vis")
        .set("viewBox", (-5, -5, W + 10, H + 10))
        .set("width", W + 10)
        .set("height", H + 10)
        .set("style", "background-color:white");

    doc = doc.add(Style::new(format!(
        "text {{text-anchor: middle;dominant-baseline: central; font-size: {}}}",
        6
    )));
    for y in 0..input.n {
        for x in 0..input.n {
            doc = doc.add(
                rect(
                    x * w,
                    W - (y + 1) * h,
                    w,
                    h,
                    &generate_dark_color(state[y][x]),
                )
                .set("stroke", "black")
                .set("stroke-width", 1)
                .set("class", "box"),
            );
        }
    }

    (score as i64, "".to_string(), doc.to_string())
}


上記の情報を参考にして、この次に与えるAtCoder Heuristic Contestの問題のビジュアライザのためのutil.rsを書いてください。
ただし、元々のutil.rsの構造を大きく変えないで欲しいです:
- Input, Output構造体を作る
- Input,Outputに実装したトレイトは必ず実装する(特にDisplayを忘れがち)
- 適切にコメントを入れる
- 入力生成方法は簡易化せずに厳密に指定に従う必要があります
- 同じlib.rsを使うので、util.rsのインターフェースを変えることは禁止
- Rustのクレートは以下のバージョンのものを使用する:
wasm-bindgen = "0.2.89"
getrandom = {version="0.2", features=["js"]}
rand = { version = "=0.8.5", features = ["small_rng", "min_const_gen"] }
rand_chacha = "=0.3.1"
rand_distr = "=0.4.3"
itertools = "=0.11.0"
proconio = { version = "=0.4.5", features = ["derive"] }
clap = { version = "4.0.22", features = ["derive"] }
svg = "0.17.0"
delaunator = "1.0.1"
web-sys = {"version" = "0.3.44", features=['console']}

ただし、以下のコードを踏襲してInput, Output, genなどを書いてください。

[ツール類]
#![allow(non_snake_case, unused_macros)]

use noise::{NoiseFn, Perlin};
use proconio::{input, marker::Chars};
use rand::prelude::*;
use std::ops::RangeBounds;

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[macro_export]
macro_rules! mat {
	($($e:expr),*) => { Vec::from(vec![$($e),*]) };
	($($e:expr,)*) => { Vec::from(vec![$($e),*]) };
	($e:expr; $d:expr) => { Vec::from(vec![$e; $d]) };
	($e:expr; $d:expr $(; $ds:expr)+) => { Vec::from(vec![mat![$e $(; $ds)*]; $d]) };
}

#[derive(Clone, Debug)]
pub struct Input {
    N: usize,
    M: usize,
    cs: Vec<Vec<char>>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(f, "{} {}", self.N, self.M)?;
        for i in 0..self.N {
            writeln!(f, "{}", self.cs[i].iter().collect::<String>())?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        N: usize, M: usize,
        cs: [Chars; N],
    }
    Input { N, M, cs }
}

pub fn read<T: Copy + PartialOrd + std::fmt::Display + std::str::FromStr, R: RangeBounds<T>>(
    token: Option<&str>,
    range: R,
) -> Result<T, String> {
    if let Some(v) = token {
        if let Ok(v) = v.parse::<T>() {
            if !range.contains(&v) {
                Err(format!("Out of range: {}", v))
            } else {
                Ok(v)
            }
        } else {
            Err(format!("Parse error: {}", v))
        }
    } else {
        Err("Unexpected EOF".to_owned())
    }
}

#[derive(Clone, Debug, Copy)]
pub enum Action {
    Move(usize),
    Carry(usize),
    Roll(usize),
}

const DIJ: [(usize, usize); 4] = [(!0, 0), (1, 0), (0, !0), (0, 1)];
const DIR: [char; 4] = ['U', 'D', 'L', 'R'];

pub struct Output {
    pub out: Vec<Action>,
}

pub fn parse_output(_input: &Input, f: &str) -> Result<Output, String> {
    let mut out = vec![];
    let mut ss = f.split_whitespace().peekable();
    while ss.peek().is_some() {
        let a = read(ss.next(), 1..=3)?;
        let dir = read(ss.next(), 'A'..='Z')?;
        let Some(d) = DIR.iter().position(|&x| x == dir) else {
            return Err(format!("Invalid direction: {}", dir));
        };
        out.push(match a {
            1 => Action::Move(d),
            2 => Action::Carry(d),
            3 => Action::Roll(d),
            _ => unreachable!(),
        });
    }
    if out.len() > 10000 {
        return Err("Too many actions".to_owned());
    }
    Ok(Output { out })
}

pub fn gen(seed: u64, problem: &str) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    match problem {
        "A" => {
            let N = 20;
            let M = 1;
            let mut cs = mat!['.'; N; N];
            let mut ps = vec![];
            for i in 0..N {
                for j in 0..N {
                    ps.push((i, j));
                }
            }
            ps.shuffle(&mut rng);
            let (i, j) = ps.pop().unwrap();
            cs[i][j] = 'A';
            for _ in 0..2 * N {
                let (i, j) = ps.pop().unwrap();
                cs[i][j] = 'a';
            }
            for _ in 0..2 * N {
                let (i, j) = ps.pop().unwrap();
                cs[i][j] = '@';
            }
            Input { N, M, cs }
        }
        "B" => {
            let N = 20;
            let M = 3;
            loop {
                let mut cs = mat!['.'; N; N];
                let mut ps = vec![];
                for i in 0..N {
                    for j in 0..N {
                        ps.push((i, j));
                    }
                }
                ps.shuffle(&mut rng);
                let mut ss = vec![];
                for k in 0..3 {
                    let (i, j) = ps.pop().unwrap();
                    cs[i][j] = (b'A' + k as u8) as char;
                    ss.push((i, j));
                }
                for k in 0..3 {
                    for _ in 0..N {
                        let (i, j) = ps.pop().unwrap();
                        cs[i][j] = (b'a' + k as u8) as char;
                    }
                }
                let mut ok = true;
                for k in 0..3 {
                    let t = (b'a' + k as u8) as char;
                    let s = ss[k];
                    let mut visited = mat![false; N; N];
                    let mut stack = vec![s];
                    visited[s.0][s.1] = true;
                    while let Some((i, j)) = stack.pop() {
                        for d in 0..4 {
                            let (di, dj) = DIJ[d];
                            let i = i + di;
                            let j = j + dj;
                            if i < N
                                && j < N
                                && !visited[i][j]
                                && (cs[i][j] == '.' || cs[i][j] == t)
                            {
                                visited[i][j] = true;
                                stack.push((i, j));
                            }
                        }
                    }
                    for i in 0..N {
                        for j in 0..N {
                            if cs[i][j] == t && !visited[i][j] {
                                ok = false;
                            }
                        }
                    }
                }
                if ok {
                    return Input { N, M, cs };
                }
            }
        }
        "C" => {
            let N = 20;
            let M = 1;
            let perlin = Perlin::new(rng.gen());
            let D = 10.0;
            let mut ps = vec![];
            for i in 0..N {
                for j in 0..N {
                    let x = i as f64 / D;
                    let y = j as f64 / D;
                    ps.push((perlin.get([x, y]), i, j));
                }
            }
            ps.sort_by(|a, b| a.0.partial_cmp(&b.0).unwrap());
            let mut cs = mat!['.'; N; N];
            for _ in 0..N * N / 2 {
                let (_, i, j) = ps.pop().unwrap();
                cs[i][j] = '@';
            }
            ps.shuffle(&mut rng);
            let (_, i, j) = ps.pop().unwrap();
            cs[i][j] = 'A';
            for _ in 0..2 * N {
                let (_, i, j) = ps.pop().unwrap();
                cs[i][j] = 'a';
            }
            Input { N, M, cs }
        }
        _ => {
            panic!("Unknown problem: {}", problem);
        }
    }
}

pub fn compute_score(input: &Input, out: &Output) -> (i64, String) {
    let (mut score, err, _) = compute_score_details(input, &out.out);
    if err.len() > 0 {
        score = 0;
    }
    (score, err)
}

pub fn compute_score_details(input: &Input, out: &[Action]) -> (i64, String, ()) {
    let mut cs = input.cs.clone();
    let mut pos = (0, 0);
    let mut K = 0;
    let mut A = 0;
    for i in 0..input.N {
        for j in 0..input.N {
            if cs[i][j] == 'A' {
                pos = (i, j);
            } else if cs[i][j] >= 'a' && cs[i][j] <= 'z' {
                K += 1;
            }
        }
    }
    for t in 0..out.len() {
        match out[t] {
            Action::Move(d) => {
                let (di, dj) = DIJ[d];
                pos.0 += di;
                pos.1 += dj;
                if pos.0 >= input.N || pos.1 >= input.N {
                    return (0, format!("Out of the board (turn {t})"), ());
                }
            }
            Action::Carry(d) => {
                let (di, dj) = DIJ[d];
                if (cs[pos.0][pos.1] < 'a' || cs[pos.0][pos.1] > 'z') && cs[pos.0][pos.1] != '@' {
                    return (0, format!("No item to carry (turn {t})"), ());
                }
                let c = cs[pos.0][pos.1];
                cs[pos.0][pos.1] = '.';
                pos.0 += di;
                pos.1 += dj;
                if pos.0 >= input.N || pos.1 >= input.N {
                    return (0, format!("Out of the board (turn {t})"), ());
                }
                if matches!(cs[pos.0][pos.1], '@' | 'a'..='z') {
                    return (0, format!("Collision (turn {t})"), ());
                } else if matches!(cs[pos.0][pos.1], 'A'..='Z') {
                    if cs[pos.0][pos.1].to_ascii_lowercase() == c {
                        A += 1;
                    }
                } else {
                    assert_eq!(cs[pos.0][pos.1], '.');
                    cs[pos.0][pos.1] = c;
                }
            }
            Action::Roll(d) => {
                let (di, dj) = DIJ[d];
                if (cs[pos.0][pos.1] < 'a' || cs[pos.0][pos.1] > 'z') && cs[pos.0][pos.1] != '@' {
                    return (0, format!("No item to roll (turn {t})"), ());
                }
                let c = cs[pos.0][pos.1];
                cs[pos.0][pos.1] = '.';
                let mut crt = pos;
                loop {
                    let next = (crt.0 + di, crt.1 + dj);
                    if next.0 >= input.N
                        || next.1 >= input.N
                        || matches!(cs[next.0][next.1], '@' | 'a'..='z')
                    {
                        cs[crt.0][crt.1] = c;
                        break;
                    } else if matches!(cs[next.0][next.1], 'A'..='Z') {
                        if cs[next.0][next.1].to_ascii_lowercase() == c {
                            A += 1;
                        }
                        break;
                    } else {
                        crt = next;
                    }
                }
            }
        }
    }
    let score = if A == K {
        (1e6 * (1.0 + (1e4 / out.len() as f64).log2())).round() as i64
    } else {
        (1e6 * A as f64 / K as f64).round() as i64
    };
    (score, String::new(), ())
}


[問題文]
問題文
N×N のマス目で表される洞窟がある。 一番左上のマスの座標を 
(0,0) とし、そこから下方向に 
i マス、右方向に 
j マス進んだ先のマスの座標を 
(i,j) とする。 洞窟の周囲は壁で囲まれており、外に出ることはできない。

洞窟内には岩と 
M 種類の鉱石が散らばっている。 また、洞窟内の異なる 
M 個のマスには穴があり、
i 種類目の鉱石を全て 
i 番目の穴に落としたい。 岩については、どの穴に落としてもよく、また洞窟内に放置してもよい。 あなたは以下の操作を 最大で 
10000 回 行うことができる。

上下左右に隣接するマスへ移動する。移動先に穴・岩・鉱石があっても移動できる。
現在位置にある岩・鉱石を上下左右に隣接するマスへ運ぶ。運ぶ先にすでに別の岩・鉱石があってはならない。運ぶ先は穴でもよい。 運んだ先が穴であった場合、岩・鉱石は穴に落ちて取り除かれる。あなたの現在位置は運んだ先のマスになる。
現在位置にある岩・鉱石を、上下左右のいずれかの方向に転がす。転がした岩・鉱石は、岩・鉱石・壁にぶつかって止まるか、穴に落ちるまで一直線に転がる。あなたの現在位置は変化しない。
転がす操作は、より詳細には以下の繰り返しによって処理される。

転がっている方向に隣接するマスが穴である場合、岩・鉱石は穴に落ちて取り除かれる。
転がっている方向に隣接するマスに岩・鉱石がある、または 
N×N の外に出る場合、現在のマスで停止する。
上記のどちらにも該当しない場合、隣接するマスへ移動し、処理を繰り返す。
転がる速度は非常に速いため、あなたの次の行動の前に必ず停止するか、穴に落ちて取り除かれる。

できるだけ少ない行動回数ですべての鉱石を対応する穴に落としてほしい。

得点
出力した行動列の長さを 
T(≤10000)、初期盤面における鉱石の総数を 
K、正しい穴に落とすことができた鉱石の総数を 
A としたとき、以下の得点が得られる。

A=K の場合、
round(10 
6
 ×(1+log 
2
​
  
T
10000
​
 ))
A<K の場合、
round(10 
6
 × 
K
A
​
 )
入力生成方法の違いにより、問題は A・B・C の 3 問 に分かれている。 それぞれの問題には 150 個のテストケース があり、各テストケースの得点の合計がその問題に対する提出の得点となる。 一つ以上のテストケースで不正な出力や制限時間超過をした場合、提出全体の判定がやとなる。 各問題に対して獲得した最高得点の総和で最終順位が決定され、コンテスト終了後のシステムテストは行われない。 同じ得点を複数のチームが得た場合、提出時刻に関わらず同じ順位となる。

入力
入力は以下の形式で標準入力から与えられる。

N 
M
C 
0
​
 
⋮
C 
N−1
​
 
盤面の大きさ 
N は、すべてのテストケースにおいて 
N=20 で固定されている。
鉱石の種類数 
M は、問題ごとに固定されている。詳しくは 「入力生成方法」 の項目を参照せよ。
各 
i=0,1,…,N−1 に対し、
C 
i
​
  は長さ 
N の文字列であり、その 
j 文字目は以下のようにマス 
(i,j) の初期状態を表す。
@: 岩が存在する。
a-z: 鉱石が存在する。
A-Z: 穴が存在する。
.: 何も存在しない。
鉱石と穴はアルファベットの大文字・小文字が対応している。 たとえば、文字 a で表される鉱石を落とすべき穴は、文字 A で表される。 最初の 
M 個のアルファベットが使用され、同じ種類の鉱石は複数存在する可能性があるが、同じ種類の穴は必ず 1 つだけである。

あなたは初期状態で穴 A のマスにいる。

出力
t 手目の操作は、行動の種類番号 
a 
t
​
 ∈{1,2,3} (1:移動、2:運ぶ、3:転がす) と上下左右の方向を表す文字 
d 
t
​
 ∈{U,D,L,R} のペア 
(a 
t
​
 ,d 
t
​
 ) で表される。 例えば、
(3,R) は現在位置にある岩・鉱石を右方向に転がす操作である。

このとき、以下の形式で標準出力に出力せよ。

a 
0
​
  
d 
0
​
 
⋮
a 
T−1
​
  
d 
T−1
​
 
サンプルプログラム
詳細
入力生成方法
入力生成方法は問題ごとに異なる。 大まかには、以下の表のような入力が生成される。

問題	M	岩
A	1	少ない
B	3	存在しない
C	1	大量
A 問題
M=1 で固定されている。

穴 A の配置: 
N 
2
  マスの中からランダムに 1 マス選択する。
鉱石 a の配置: 残りの 
N 
2
 −1 マスの中からランダムに 
2N マス選択する。
岩 @ の配置: 残りの 
N 
2
 −1−2N マスの中からランダムに 
2N マス選択する。
B 問題
M=3 で固定されている。

穴 A、B、C の配置: 
N 
2
  マスの中から異なる 3 マスをランダムに選択する。
鉱石 a の配置: 残りの 
N 
2
 −3 マスの中からランダムに 
N マス選択する。
鉱石 b の配置: 残りの 
N 
2
 −3−N マスの中からランダムに 
N マス選択する。
鉱石 c の配置: 残りの 
N 
2
 −3−2N マスの中からランダムに 
N マス選択する。
最後に、各穴から空きマスまたは対応する鉱石が存在するマスのみを通って、すべての対応する鉱石に到達可能であることを確認する。 到達不可能な鉱石がある場合、生成をやり直す。

C 問題
M=1 で固定されている。

岩 @ の配置: 各マス 
(i,j) に対し、
h 
i,j
​
 =noise(i/10,j/10) を生成する。ここで、
noise(y,x) は二次元のPerlin noiseを生成する関数である。
h 
i,j
​
  の値が大きい順に上位 
N 
2
 /2 マスに岩を配置する。
穴 A の配置: 残りの 
N 
2
 /2 マスの中からランダムに 1 マス選択する。
鉱石 a の配置: 残りの 
N 
2
 /2−1 マスの中からランダムに 
2N マス選択する。
ツール(入力ジェネレータ・スコア計算)
ローカル版: 使用するにはRust言語のコンパイル環境をご用意下さい。
Windows用のコンパイル済みバイナリ: Rust言語の環境構築が面倒な方は代わりにこちらをご利用下さい。
コンテスト期間中に、チーム外とのビジュアライズ結果の共有や解法・考察に関する言及は禁止されています。ご注意下さい。

[ビジュアライザの仕様]
- 洞窟を N × N のマス目で黒線を使って表す。
- 岩を '@'、鉱石を 'a'~'z'、穴を 'A'~'Z' で表し、黒字でマス目に書き込む。
- 「あなた」の現在地をピンクで塗りつぶす。
- 操作1回につき1ターンとする。